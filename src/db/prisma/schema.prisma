// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id
  idNumber  Int      @default(122) @map("id_number") @db.SmallInt
  isDeleted Boolean  @default(false) @map("is_deleted")
  invites   Int      @default(2) @db.SmallInt
  role      Role     @default(USER)
  reviews   Review[]
  votes     Vote[]
  Invite    Invite[]
  Report    Report[]

  @@map("users")
}

model Report {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now()) @map("created_at")
  reportType ReportType @map("report_type")
  reviewId   Int        @map("review_id")
  userId     String?    @map("user_id")
  review     Review     @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user       User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  reason     String?

  @@unique(name: "reportInstance", [userId, reviewId])
}

model Invite {
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  email  String
  used   Boolean @default(false)

  @@id([userId, email])
  @@map("invites")
}

model Review {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?   @map("user_id")
  userIdNumber Int       @map("user_id_number") @db.SmallInt
  tags         Tag[]
  rating       Int
  difficulty   Int
  comment      String
  modality     Modality
  course       Course    @relation(fields: [courseCode], references: [code], onDelete: Cascade)
  professor    Professor @relation(fields: [professorId], references: [id], onDelete: Cascade)
  professorId  Int       @map("professor_id")
  courseCode   String
  votes        Vote[]
  voteCount    Int       @default(0) @map("vote_count")
  Report       Report[]

  @@map("reviews")
}

model Professor {
  id            Int    @id @default(autoincrement())
  firstName     String @map("first_name")
  lastName      String @map("last_name")
  avgRating     Float? @map("avg_rating")
  avgDifficulty Float? @map("avg_difficulty")

  courses Course[]
  reviews Review[]
  classes Class[]
  tags    Tag[]

  @@unique(name: "fullName", [firstName, lastName])
  @@map("professors")
}

model Course {
  code        String      @id
  title       String?
  description String?
  reviews     Review[]
  professors  Professor[]
  classes     Class[]

  @@map("courses")
}

model Class {
  code        Int         @id @db.SmallInt
  updatedAt   DateTime    @updatedAt @map("updated_at")
  course      Course      @relation(fields: [course_code], references: [code], onDelete: Cascade)
  course_code String      @map("course_code")
  section     String
  professor   Professor?  @relation(fields: [professorId], references: [id], onDelete: SetNull)
  professorId Int?        @map("professor_id")
  schedules   Schedule[]
  rooms       String[]
  enrolled    Int         @db.SmallInt
  cap         Int         @db.SmallInt
  restriction Restriction @default(NONE)
  modality    Modality    @default(TENTATIVE)
  remarks     String?

  @@map("classes")
}

model Vote {
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  review   Review  @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  userId   String  @map("user_id")
  reviewId Int     @map("review_id")
  isLike   Boolean @map("is_like")

  @@id([userId, reviewId])
  @@map("votes")
}

model Schedule {
  id      Int     @id @default(autoincrement())
  day     Day
  start   Int     @db.SmallInt
  end     Int     @db.SmallInt
  date    String
  classes Class[]

  @@unique(name: "scheduleParams", [day, start, end, date])
  @@map("schedules")
}

enum Restriction {
  NONE
  FROSH
  RESTRICTED
}

enum Modality {
  HYBRID
  F2F
  ONLINE
  PREDOMINANTLY_ONLINE
  PREDOMINANTLY_F2F
  PURE_ASYNCHRONOUS
  TENTATIVE
}

enum ReportType {
  FAKE_REVIEW
  OFFENSIVE_CONTENT
  SPAM
  INVALID_COURSE
  OTHER
}

enum Day {
  M
  T
  W
  H
  F
  S
  U
}

enum Tag {
  WOULD_TAKE_AGAIN
  HIGH_WORKLOAD
  GIVES_FEEDBACK
  CLEAR_INSTRUCTIONS
  GRADE_CURVE
  EXTRA_CREDIT
  KNOWS_THEIR_SUBJECT
  CONSIDERATE
  AMAZING_LECTURES
  MANDATORY_ATTENDANCE
  FRIENDLY
  GRADES_LATE
  RESPONSIVE
}

enum Role {
  ADMIN
  VERIFIED
  USER
}
